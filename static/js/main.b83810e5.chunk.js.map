{"version":3,"sources":["api.js","asyncActionUtil.js","UsersContext.js","User.js","Users.js","App.js","serviceWorker.js","index.js"],"names":["a","axios","get","response","data","id","createAsyncDispatcher","type","promiseFn","SUCCESS","ERROR","dispatch","rest","error","initalAsyncState","loading","loadingState","createAsyncHandler","key","state","action","initialState","users","user","usersHandler","userHandler","usersReducer","Error","UsersStateContext","createContext","UsersDispatchContext","UsersProvider","children","useReducer","Provider","value","useUsersState","useContext","useUsersDispatch","getUsers","getUser","User","useEffect","username","email","Users","useState","userId","setUserId","fetchData","map","onClick","style","cursor","name","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b83810e5.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport async function getUsers() {\r\n  const response = await axios.get(\r\n    \"https://jsonplaceholder.typicode.com/users\"\r\n  );\r\n  return response.data;\r\n}\r\n\r\nexport async function getUser(id) {\r\n  const response = await axios.get(\r\n    `https://jsonplaceholder.typicode.com/users/${id}`\r\n  );\r\n  return response.data;\r\n}\r\n","import { act } from \"react-dom/test-utils\";\r\n\r\nexport default function createAsyncDispatcher(type, promiseFn) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const ERROR = `${type}_ERROR`;\r\n\r\n  async function actionHandler(dispatch, ...rest) {\r\n    dispatch({ type });\r\n    try {\r\n      const data = await promiseFn(...rest);\r\n      dispatch({\r\n        type: SUCCESS,\r\n        data,\r\n      });\r\n    } catch (e) {\r\n      dispatch({\r\n        type: ERROR,\r\n        error: e,\r\n      });\r\n    }\r\n  }\r\n  return actionHandler;\r\n}\r\nexport const initalAsyncState = {\r\n  loading: false,\r\n  data: null,\r\n  error: null,\r\n};\r\n\r\nconst loadingState = {\r\n  loading: true,\r\n  data: null,\r\n  error: null,\r\n};\r\n\r\n// 성공했을 때의 상태 만들어주는 함수\r\nconst success = (data) => ({\r\n  loading: false,\r\n  data,\r\n  error: null,\r\n});\r\n\r\n// 실패했을 때의 상태 만들어주는 함수\r\nconst error = (error) => ({\r\n  loading: false,\r\n  data: null,\r\n  error: error,\r\n});\r\n\r\nexport function createAsyncHandler(type, key) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const ERROR = `${type}_ERROR`;\r\n\r\n  function handler(state, action) {\r\n    switch (action.type) {\r\n      case type:\r\n        return {\r\n          ...state,\r\n          [key]: loadingState,\r\n        };\r\n      case SUCCESS:\r\n        return {\r\n          ...state,\r\n          [key]: success(action.data),\r\n        };\r\n      case ERROR:\r\n        return {\r\n          ...state,\r\n          [key]: error(action.error),\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n  return handler;\r\n}\r\n","import React, { createContext, useReducer, useContext } from \"react\";\r\nimport * as api from \"./api\";\r\nimport createAsyncDispatcher, {\r\n  initalAsyncState,\r\n  createAsyncHandler,\r\n} from \"./asyncActionUtil\";\r\n\r\nconst initialState = {\r\n  users: initalAsyncState,\r\n  user: initalAsyncState,\r\n};\r\nconst usersHandler = createAsyncHandler(\"GET_USERS\", \"users\");\r\nconst userHandler = createAsyncHandler(\"GET_USER\", \"user\");\r\n\r\nfunction usersReducer(state, action) {\r\n  switch (action.type) {\r\n    case \"GET_USERS\":\r\n    case \"GET_USERS_SUCCESS\":\r\n    case \"GET_USERS_ERROR\":\r\n      return usersHandler(state, action);\r\n    case \"GET_USER\":\r\n    case \"GET_USER_SUCCESS\":\r\n    case \"GET_USER_ERROR\":\r\n      return userHandler(state, action);\r\n    default:\r\n      throw new Error(`Unhanded action type: ${action.type}`);\r\n  }\r\n}\r\n\r\nconst UsersStateContext = createContext(null);\r\nconst UsersDispatchContext = createContext(null);\r\n\r\nexport function UsersProvider({ children }) {\r\n  const [state, dispatch] = useReducer(usersReducer, initialState);\r\n  return (\r\n    <UsersStateContext.Provider value={state}>\r\n      <UsersDispatchContext.Provider value={dispatch}>\r\n        {children}\r\n      </UsersDispatchContext.Provider>\r\n    </UsersStateContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useUsersState() {\r\n  const state = useContext(UsersStateContext);\r\n  if (!state) {\r\n    throw new Error(\"Cannot find UsersProvider\");\r\n  }\r\n  return state;\r\n}\r\n\r\nexport function useUsersDispatch() {\r\n  const dispatch = useContext(UsersDispatchContext);\r\n  if (!dispatch) {\r\n    throw new Error(\"Cannot find UsersProvider\");\r\n  }\r\n  return dispatch;\r\n}\r\n\r\nexport const getUsers = createAsyncDispatcher(\"GET_USERS\", api.getUsers);\r\nexport const getUser = createAsyncDispatcher(\"GET_USER\", api.getUser);\r\n","import React, { useEffect } from \"react\";\r\nimport { useUsersState, useUsersDispatch, getUser } from \"./UsersContext\";\r\n\r\nfunction User({ id }) {\r\n  const state = useUsersState();\r\n  const dispatch = useUsersDispatch();\r\n  useEffect(() => {\r\n    getUser(dispatch, id);\r\n  }, [dispatch, id]);\r\n\r\n  const { data: user, loading, error } = state.user;\r\n\r\n  if (loading) return <div>로딩중..</div>;\r\n  if (error) return <div>에러가 발생했습니다</div>;\r\n  if (!user) return null;\r\n  return (\r\n    <div>\r\n      <h2>{user.username}</h2>\r\n      <p>\r\n        <b>Email:</b> {user.email}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default User;\r\n","import React, { useState } from \"react\";\r\nimport { useUsersState, useUsersDispatch, getUsers } from \"./UsersContext\";\r\nimport User from \"./User\";\r\n\r\nfunction Users() {\r\n  const [userId, setUserId] = useState(null);\r\n  const state = useUsersState();\r\n  const dispatch = useUsersDispatch();\r\n\r\n  const { data: users, loading, error } = state.users;\r\n  const fetchData = () => {\r\n    getUsers(dispatch);\r\n  };\r\n\r\n  if (loading) return <div>로딩중..</div>;\r\n  if (error) return <div>에러가 발생했습니다</div>;\r\n  if (!users) return <button onClick={fetchData}>불러오기</button>;\r\n\r\n  return (\r\n    <>\r\n      <ul>\r\n        {users.map((user) => (\r\n          <li\r\n            key={user.id}\r\n            onClick={() => setUserId(user.id)}\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            {user.username} ({user.name})\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={fetchData}>다시 불러오기</button>\r\n      {userId && <User id={userId} />}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Users;\r\n","import React from \"react\";\nimport Users from \"./Users\";\nimport { UsersProvider } from \"./UsersContext\";\n\nfunction App() {\n  return (\n    <UsersProvider>\n      <Users />\n    </UsersProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}